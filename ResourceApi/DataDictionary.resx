<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
    <comment>Represents the amount of currency being exchanged in the transaction.</comment>
  </data>
  <data name="ContentType" xml:space="preserve">
    <value>ContentType</value>
    <comment>The MIME type of the file, indicating the format of the file's content.</comment>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
    <comment>Gets or sets the creation date and time of the entity.</comment>
  </data>
  <data name="CurrencyCode" xml:space="preserve">
    <value>CurrencyCode</value>
    <comment>Represents the code that identifies the currency (e.g., USD, EUR).</comment>
  </data>
  <data name="DeletedByUserId" xml:space="preserve">
    <value>DeletedByUserId</value>
    <comment>Gets or sets the ID of the user who marked the entity as deleted, if applicable.</comment>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
    <comment>Description</comment>
  </data>
  <data name="EmailAddress" xml:space="preserve">
    <value>EmailAddress</value>
    <comment>The user's email address for communication and notifications.</comment>
  </data>
  <data name="FileData" xml:space="preserve">
    <value>FileData</value>
    <comment>The binary data of the file, stored as a byte array.</comment>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>FileName</value>
    <comment>The name of the file as it was uploaded by the user.</comment>
  </data>
  <data name="FromCurrencyId" xml:space="preserve">
    <value>FromCurrencyId</value>
    <comment>Represents the identifier of the currency from which the entity is calculated</comment>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
    <comment>Gets or sets the unique identifier for the entity.</comment>
  </data>
  <data name="ImagePath" xml:space="preserve">
    <value>ImagePath</value>
    <comment>The path to an image representing the entity (e.g., flag or symbol).</comment>
  </data>
  <data name="IsActive" xml:space="preserve">
    <value>IsActive</value>
    <comment>A flag indicating whether the entity is currently active.</comment>
  </data>
  <data name="Key" xml:space="preserve">
    <value>Key</value>
    <comment>Represents the key of the currency attribute.</comment>
  </data>
  <data name="MetaDescription" xml:space="preserve">
    <value>MetaDescription</value>
    <comment>Gets or sets the meta description or summary information for the entity.</comment>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
    <comment>Name</comment>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
    <comment>A hashed representation of the user's password for authentication.</comment>
  </data>
  <data name="Rate" xml:space="preserve">
    <value>Rate</value>
    <comment>Represents the exchange rate value between the two currencies.</comment>
  </data>
  <data name="ResultAmount" xml:space="preserve">
    <value>ResultAmount</value>
    <comment>Represents the resulting amount of currency after the exchange transaction.</comment>
  </data>
  <data name="ToCurrencyId" xml:space="preserve">
    <value>ToCurrencyId</value>
    <comment>Represents the identifier of the currency to which the entity is calculated.</comment>
  </data>
  <data name="TransactionDate" xml:space="preserve">
    <value>TransactionDate</value>
    <comment>Represents the date and time when the transaction occurred.</comment>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Updated</value>
    <comment>Gets or sets the last updated date and time of the entity, if any.</comment>
  </data>
  <data name="UpdatedByUserId" xml:space="preserve">
    <value>UpdatedByUserId</value>
    <comment>Gets or sets the ID of the user who last updated the entity, if applicable.</comment>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>UserName</value>
    <comment>A unique username chosen by the user for login.</comment>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
    <comment>Represents the value associated with the currency attribute key.</comment>
  </data>
</root>