// <auto-generated />
using System;
using ExchangeApi.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExchangeApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BASE")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExchangeApi.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("69b516d8-055a-4459-a9a1-bf4bc00a39ba"))
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 5, 27, 22, 21, 2, 914, DateTimeKind.Unspecified).AddTicks(6140), new TimeSpan(0, 3, 30, 0, 0)))
                        .HasComment("Gets or sets the creation date and time of the entity.");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who marked the entity as deleted, if applicable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasComment("Gets or sets the meta description or summary information for the entity.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Gets or sets the last updated date and time of the entity, if any.");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who last updated the entity, if applicable.");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Category", "BASE");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("8e7c04a2-6997-4e1b-aa71-c90415162293"))
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 5, 27, 22, 21, 2, 942, DateTimeKind.Unspecified).AddTicks(6339), new TimeSpan(0, 3, 30, 0, 0)))
                        .HasComment("Gets or sets the creation date and time of the entity.");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasComment("Represents the code that identifies the currency (e.g., USD, EUR).");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who marked the entity as deleted, if applicable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The path to an image representing the entity (e.g., flag or symbol).");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("A flag indicating whether the entity is currently active.");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Gets or sets the meta description or summary information for the entity.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Name");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Gets or sets the last updated date and time of the entity, if any.");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who last updated the entity, if applicable.");

                    b.HasKey("Id")
                        .HasName("PK_Base_Currency");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyCode")
                        .IsUnique();

                    b.ToTable("Currency", "BASE");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.CurrencyAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("8b49b030-f9a5-4bb7-8dba-da09c9e18b88"))
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 5, 27, 22, 21, 2, 932, DateTimeKind.Unspecified).AddTicks(8367), new TimeSpan(0, 3, 30, 0, 0)))
                        .HasComment("Gets or sets the creation date and time of the entity.");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who marked the entity as deleted, if applicable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("A flag indicating whether the entity is currently active.");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Represents the key of the currency attribute.");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Gets or sets the meta description or summary information for the entity.");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Gets or sets the last updated date and time of the entity, if any.");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who last updated the entity, if applicable.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Represents the value associated with the currency attribute key.");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("CurrencyAttribute", "BASE");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("873ba7f4-eb9f-4f8c-ac4b-0d46efe00596"))
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 5, 27, 22, 21, 2, 947, DateTimeKind.Unspecified).AddTicks(9534), new TimeSpan(0, 3, 30, 0, 0)))
                        .HasComment("Gets or sets the creation date and time of the entity.");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who marked the entity as deleted, if applicable.");

                    b.Property<Guid>("FromCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("A flag indicating whether the entity is currently active.");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Gets or sets the meta description or summary information for the entity.");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Represents the exchange rate value between the two currencies.");

                    b.Property<Guid>("ToCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Gets or sets the last updated date and time of the entity, if any.");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who last updated the entity, if applicable.");

                    b.HasKey("Id")
                        .HasName("Pk_Base_ExchangeRate");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("ExchangeRate", "BASE");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.ExchangeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("02a12ee5-8a0d-496f-8d67-8ade513690b2"))
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Represents the amount of currency being exchanged in the transaction.");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 5, 27, 22, 21, 2, 962, DateTimeKind.Unspecified).AddTicks(284), new TimeSpan(0, 3, 30, 0, 0)))
                        .HasComment("Gets or sets the creation date and time of the entity.");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who marked the entity as deleted, if applicable.");

                    b.Property<Guid>("ExChangeRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromCurrencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Represents the identifier of the currency from which the entity is calculated");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Gets or sets the meta description or summary information for the entity.");

                    b.Property<decimal>("ResultAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Represents the resulting amount of currency after the exchange transaction.");

                    b.Property<Guid>("ToCurrencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Represents the identifier of the currency to which the entity is calculated.");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Represents the date and time when the transaction occurred.");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Gets or sets the last updated date and time of the entity, if any.");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who last updated the entity, if applicable.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("Pk_BASE_ExchangeTransaction");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ExChangeRateId");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("ExchangeTransaction", "BASE");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The MIME type of the file, indicating the format of the file's content.");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 5, 27, 22, 21, 2, 970, DateTimeKind.Unspecified).AddTicks(3452), new TimeSpan(0, 3, 30, 0, 0)))
                        .HasComment("Gets or sets the creation date and time of the entity.");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who marked the entity as deleted, if applicable.");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("The binary data of the file, stored as a byte array.");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of the file as it was uploaded by the user.");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Gets or sets the meta description or summary information for the entity.");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Gets or sets the last updated date and time of the entity, if any.");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_File");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("File", "BASE");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the unique identifier for the entity.");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 5, 27, 22, 21, 2, 977, DateTimeKind.Unspecified).AddTicks(2454), new TimeSpan(0, 3, 30, 0, 0)))
                        .HasComment("Gets or sets the creation date and time of the entity.");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who marked the entity as deleted, if applicable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasComment("The user's email address for communication and notifications.");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("A flag indicating whether the entity is currently active.");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("A unique username chosen by the user for login.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasComment("A hashed representation of the user's password for authentication.");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Gets or sets the last updated date and time of the entity, if any.");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gets or sets the ID of the user who last updated the entity, if applicable.");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("A unique username chosen by the user for login.");

                    b.HasKey("Id")
                        .HasName("Pk_BASE_User");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_User_UserName");

                    b.ToTable("User", "BASE");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.Currency", b =>
                {
                    b.HasOne("ExchangeApi.Domain.Entities.Category", "Category")
                        .WithMany("Currencies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.CurrencyAttribute", b =>
                {
                    b.HasOne("ExchangeApi.Domain.Entities.Category", null)
                        .WithMany("CurrencyAttributes")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ExchangeApi.Domain.Entities.Currency", "Currency")
                        .WithMany("CurrencyAttributes")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeApi.Domain.Entities.User", "User")
                        .WithMany("CurrencyAttributes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.ExchangeRate", b =>
                {
                    b.HasOne("ExchangeApi.Domain.Entities.Currency", "FromCurrency")
                        .WithMany("FromExchangeRates")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeApi.Domain.Entities.Currency", "ToCurrency")
                        .WithMany("ToExchangeRates")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.ExchangeTransaction", b =>
                {
                    b.HasOne("ExchangeApi.Domain.Entities.ExchangeRate", "ExchangeRate")
                        .WithMany()
                        .HasForeignKey("ExChangeRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeApi.Domain.Entities.Currency", "FromCurrency")
                        .WithMany("FromExchangeTransactions")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeApi.Domain.Entities.Currency", "ToCurrency")
                        .WithMany("ToExchangeTransactions")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeApi.Domain.Entities.User", "User")
                        .WithMany("ExchangeTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeRate");

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.File", b =>
                {
                    b.HasOne("ExchangeApi.Domain.Entities.Currency", "Currency")
                        .WithMany("Files")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeApi.Domain.Entities.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.Category", b =>
                {
                    b.Navigation("Currencies");

                    b.Navigation("CurrencyAttributes");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.Currency", b =>
                {
                    b.Navigation("CurrencyAttributes");

                    b.Navigation("Files");

                    b.Navigation("FromExchangeRates");

                    b.Navigation("FromExchangeTransactions");

                    b.Navigation("ToExchangeRates");

                    b.Navigation("ToExchangeTransactions");
                });

            modelBuilder.Entity("ExchangeApi.Domain.Entities.User", b =>
                {
                    b.Navigation("CurrencyAttributes");

                    b.Navigation("ExchangeTransactions");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
